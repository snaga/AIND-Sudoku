# -*- coding: utf-8 -*-

import solution
import unittest

from solution import cross
from solution import grid_values
from solution import display
from solution import eliminate
from solution import only_choice
from solution import reduce_puzzle
from solution import search

class TestSolution(unittest.TestCase):
    def setUp(self):
        self.maxDiff = None

    def test_cross_001(self):
        self.assertEqual(['A1'], cross("A", "1"))
        self.assertEqual(['A1','A2'], cross("A", "12"))
        self.assertEqual(['A1','A2', 'B1','B2'], cross("AB", "12"))

    def test_grid_values_001(self):
        grid = "..3.2.6..9..3.5..1..18.64....81.29..7.......8..67.82....26.95..8..2.3..9..5.1.3.."

        self.assertEqual({'I6': '123456789', 'H9': '9', 'I2': '123456789', 'E8': '123456789', 'H3': '123456789', 'H7': '123456789', 'I7': '3', 'I4': '123456789', 'H5': '123456789', 'F9': '123456789', 'G7': '5', 'G6': '9', 'G5': '123456789', 'E1': '7', 'G3': '2', 'G2': '123456789', 'G1': '123456789', 'I1': '123456789', 'C8': '123456789', 'I3': '5', 'E5': '123456789', 'I5': '1', 'C9': '123456789', 'G9': '123456789', 'G8': '123456789', 'A1': '123456789', 'A3': '3', 'A2': '123456789', 'A5': '2', 'A4': '123456789', 'A7': '6', 'A6': '123456789', 'C3': '1', 'C2': '123456789', 'C1': '123456789', 'E6': '123456789', 'C7': '4', 'C6': '6', 'C5': '123456789', 'C4': '8', 'I9': '123456789', 'D8': '123456789', 'I8': '123456789', 'E4': '123456789', 'D9': '123456789', 'H8': '123456789', 'F6': '8', 'A9': '123456789', 'G4': '6', 'A8': '123456789', 'E7': '123456789', 'E3': '123456789', 'F1': '123456789', 'F2': '123456789', 'F3': '6', 'F4': '7', 'F5': '123456789', 'E2': '123456789', 'F7': '2', 'F8': '123456789', 'D2': '123456789', 'H1': '8', 'H6': '3', 'H2': '123456789', 'H4': '2', 'D3': '8', 'B4': '3', 'B5': '123456789', 'B6': '5', 'B7': '123456789', 'E9': '8', 'B1': '9', 'B2': '123456789', 'B3': '123456789', 'D6': '2', 'D7': '9', 'D4': '1', 'D5': '123456789', 'B8': '123456789', 'B9': '1', 'D1': '123456789'}, grid_values(grid))

    def test_display_001(self):
        grid = "..3.2.6..9..3.5..1..18.64....81.29..7.......8..67.82....26.95..8..2.3..9..5.1.3.."
        display(grid_values(grid))

    def test_eliminate_001(self):
        grid = "..3.2.6..9..3.5..1..18.64....81.29..7.......8..67.82....26.95..8..2.3..9..5.1.3.."
        values = grid_values(grid)
        values = eliminate(values)
        self.assertEqual({'G7': '5', 'G6': '9', 'G5': '478', 'G4': '6', 'G3': '2', 'G2': '1347', 'G1': '134', 'G9': '47', 'G8': '1478', 'C9': '2357', 'C8': '23579', 'C3': '1', 'C2': '257', 'C1': '25', 'C7': '4', 'C6': '6', 'C5': '79', 'A4': '49', 'A9': '57', 'A8': '5789', 'F1': '1345', 'F2': '13459', 'F3': '6', 'F4': '7', 'F5': '3459', 'F6': '8', 'F7': '2', 'F8': '1345', 'F9': '345', 'B4': '3', 'B5': '47', 'B6': '5', 'B7': '78', 'E9': '8', 'B1': '9', 'B2': '24678', 'B3': '47', 'C4': '8', 'B8': '278', 'B9': '1', 'I9': '2467', 'I8': '24678', 'I1': '46', 'I3': '5', 'I2': '4679', 'I5': '1', 'I4': '4', 'I7': '3', 'I6': '47', 'A1': '45', 'A3': '3', 'A2': '4578', 'A5': '2', 'E8': '13456', 'A7': '6', 'A6': '147', 'E5': '34569', 'E4': '459', 'E7': '1', 'E6': '4', 'E1': '7', 'E3': '49', 'E2': '123459', 'H8': '1467', 'H9': '9', 'H2': '1467', 'H3': '47', 'H1': '8', 'H6': '3', 'H7': '17', 'H4': '2', 'H5': '457', 'D8': '34567', 'D9': '34567', 'D6': '2', 'D7': '9', 'D4': '1', 'D5': '3456', 'D2': '345', 'D3': '8', 'D1': '345'}, values)

    def test_only_choice_001(self):
        grid = "..3.2.6..9..3.5..1..18.64....81.29..7.......8..67.82....26.95..8..2.3..9..5.1.3.."
        values = grid_values(grid)
        values = eliminate(values)
        values = only_choice(values)

    def test_reduce_puzzle_001(self):
        grid = "..3.2.6..9..3.5..1..18.64....81.29..7.......8..67.82....26.95..8..2.3..9..5.1.3.."
        values = reduce_puzzle(grid_values(grid))
        self.assertEqual({'G7':'5','G6':'9','G5':'8','G4':'6','G3':'2','G2':'7','G1':'3','G9':'4','G8':'1','C9':'3','C8':'9','C3':'1','C2':'5','C1':'2','C7':'4','C6':'6','C5':'7','C4':'8','E5':'6','E4':'5','F1':'1','F2':'3','F3':'6','F4':'7','F5':'9','F6':'8','F7':'2','F8':'4','F9':'5','B4':'3','B5':'4','B6':'5','B7':'8','B1':'9','B2':'6','B3':'7','B8':'2','B9':'1','I9':'2','I8':'8','I1':'6','I3':'5','I2':'9','I5':'1','I4':'4','I7':'3','I6':'7','A1':'4','A3':'3','A2':'8','E9':'8','A4':'9','A7':'6','A6':'1','A9':'7','A8':'5','E7':'1','E6':'4','E1':'7','E3':'9','E2':'2','E8':'3','A5':'2','H8':'6','H9':'9','H2':'1','H3':'4','H1':'8','H6':'3','H7':'7','H4':'2','H5':'5','D8':'7','D9':'6','D6':'2','D7':'9','D4':'1','D5':'3','D2':'4','D3':'8','D1':'5'}, values)

    def test_search_001(self):
        grid = "4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......"
        values = grid_values(grid)
        values = search(values)
        self.assertEqual({'G7':'5','G6':'3','G5':'4','G4':'6','G3':'9','G2':'8','G1':'2','G9':'1','G8':'7','C9':'6','C8':'1','C3':'8','C2':'5','C1':'9','C7':'3','C6':'4','C5':'2','C4':'7','A9':'5','A8':'2','F1':'3','F2':'4','F3':'6','F4':'9','F5':'1','F6':'2','F7':'7','F8':'5','F9':'8','B4':'1','B5':'5','B6':'8','B7':'9','B1':'6','B2':'3','B3':'2','B8':'4','B9':'7','I9':'3','I8':'9','I1':'1','I3':'4','I2':'6','I5':'7','I4':'8','I7':'2','I6':'5','A1':'4','A3':'7','A2':'1','E9':'2','A4':'3','A7':'8','A6':'9','E5':'8','E4':'5','E7':'4','E6':'6','E1':'7','E3':'1','E2':'9','E8':'3','A5':'6','H8':'8','H9':'4','H2':'7','H3':'3','H1':'5','H6':'1','H7':'6','H4':'2','H5':'9','D8':'6','D9':'9','D6':'7','D7':'1','D4':'4','D5':'3','D2':'2','D3':'5','D1':'8'}, values)

class TestNakedTwins(unittest.TestCase):
    before_naked_twins_1 = {'I6': '4', 'H9': '3', 'I2': '6', 'E8': '1', 'H3': '5', 'H7': '8', 'I7': '1', 'I4': '8',
                            'H5': '6', 'F9': '7', 'G7': '6', 'G6': '3', 'G5': '2', 'E1': '8', 'G3': '1', 'G2': '8',
                            'G1': '7', 'I1': '23', 'C8': '5', 'I3': '23', 'E5': '347', 'I5': '5', 'C9': '1', 'G9': '5',
                            'G8': '4', 'A1': '1', 'A3': '4', 'A2': '237', 'A5': '9', 'A4': '2357', 'A7': '27',
                            'A6': '257', 'C3': '8', 'C2': '237', 'C1': '23', 'E6': '579', 'C7': '9', 'C6': '6',
                            'C5': '37', 'C4': '4', 'I9': '9', 'D8': '8', 'I8': '7', 'E4': '6', 'D9': '6', 'H8': '2',
                            'F6': '125', 'A9': '8', 'G4': '9', 'A8': '6', 'E7': '345', 'E3': '379', 'F1': '6',
                            'F2': '4', 'F3': '23', 'F4': '1235', 'F5': '8', 'E2': '37', 'F7': '35', 'F8': '9',
                            'D2': '1', 'H1': '4', 'H6': '17', 'H2': '9', 'H4': '17', 'D3': '2379', 'B4': '27',
                            'B5': '1', 'B6': '8', 'B7': '27', 'E9': '2', 'B1': '9', 'B2': '5', 'B3': '6', 'D6': '279',
                            'D7': '34', 'D4': '237', 'D5': '347', 'B8': '3', 'B9': '4', 'D1': '5'}
    possible_solutions_1 = [
        {'G7': '6', 'G6': '3', 'G5': '2', 'G4': '9', 'G3': '1', 'G2': '8', 'G1': '7', 'G9': '5', 'G8': '4', 'C9': '1',
         'C8': '5', 'C3': '8', 'C2': '237', 'C1': '23', 'C7': '9', 'C6': '6', 'C5': '37', 'A4': '2357', 'A9': '8',
         'A8': '6', 'F1': '6', 'F2': '4', 'F3': '23', 'F4': '1235', 'F5': '8', 'F6': '125', 'F7': '35', 'F8': '9',
         'F9': '7', 'B4': '27', 'B5': '1', 'B6': '8', 'B7': '27', 'E9': '2', 'B1': '9', 'B2': '5', 'B3': '6', 'C4': '4',
         'B8': '3', 'B9': '4', 'I9': '9', 'I8': '7', 'I1': '23', 'I3': '23', 'I2': '6', 'I5': '5', 'I4': '8', 'I7': '1',
         'I6': '4', 'A1': '1', 'A3': '4', 'A2': '237', 'A5': '9', 'E8': '1', 'A7': '27', 'A6': '257', 'E5': '347',
         'E4': '6', 'E7': '345', 'E6': '579', 'E1': '8', 'E3': '79', 'E2': '37', 'H8': '2', 'H9': '3', 'H2': '9',
         'H3': '5', 'H1': '4', 'H6': '17', 'H7': '8', 'H4': '17', 'H5': '6', 'D8': '8', 'D9': '6', 'D6': '279',
         'D7': '34', 'D4': '237', 'D5': '347', 'D2': '1', 'D3': '79', 'D1': '5'},
        {'I6': '4', 'H9': '3', 'I2': '6', 'E8': '1', 'H3': '5', 'H7': '8', 'I7': '1', 'I4': '8', 'H5': '6', 'F9': '7',
         'G7': '6', 'G6': '3', 'G5': '2', 'E1': '8', 'G3': '1', 'G2': '8', 'G1': '7', 'I1': '23', 'C8': '5', 'I3': '23',
         'E5': '347', 'I5': '5', 'C9': '1', 'G9': '5', 'G8': '4', 'A1': '1', 'A3': '4', 'A2': '237', 'A5': '9',
         'A4': '2357', 'A7': '27', 'A6': '257', 'C3': '8', 'C2': '237', 'C1': '23', 'E6': '579', 'C7': '9', 'C6': '6',
         'C5': '37', 'C4': '4', 'I9': '9', 'D8': '8', 'I8': '7', 'E4': '6', 'D9': '6', 'H8': '2', 'F6': '125',
         'A9': '8', 'G4': '9', 'A8': '6', 'E7': '345', 'E3': '79', 'F1': '6', 'F2': '4', 'F3': '23', 'F4': '1235',
         'F5': '8', 'E2': '3', 'F7': '35', 'F8': '9', 'D2': '1', 'H1': '4', 'H6': '17', 'H2': '9', 'H4': '17',
         'D3': '79', 'B4': '27', 'B5': '1', 'B6': '8', 'B7': '27', 'E9': '2', 'B1': '9', 'B2': '5', 'B3': '6',
         'D6': '279', 'D7': '34', 'D4': '237', 'D5': '347', 'B8': '3', 'B9': '4', 'D1': '5'}
        ]

    before_naked_twins_2 = {'A1': '23', 'A2': '4', 'A3': '7', 'A4': '6', 'A5': '8', 'A6': '5', 'A7': '23', 'A8': '9',
                            'A9': '1', 'B1': '6', 'B2': '9', 'B3': '8', 'B4': '4', 'B5': '37', 'B6': '1', 'B7': '237',
                            'B8': '5', 'B9': '237', 'C1': '23', 'C2': '5', 'C3': '1', 'C4': '23', 'C5': '379',
                            'C6': '2379', 'C7': '8', 'C8': '6', 'C9': '4', 'D1': '8', 'D2': '17', 'D3': '9',
                            'D4': '1235', 'D5': '6', 'D6': '237', 'D7': '4', 'D8': '27', 'D9': '2357', 'E1': '5',
                            'E2': '6', 'E3': '2', 'E4': '8', 'E5': '347', 'E6': '347', 'E7': '37', 'E8': '1', 'E9': '9',
                            'F1': '4', 'F2': '17', 'F3': '3', 'F4': '125', 'F5': '579', 'F6': '279', 'F7': '6',
                            'F8': '8', 'F9': '257', 'G1': '1', 'G2': '8', 'G3': '6', 'G4': '35', 'G5': '345',
                            'G6': '34', 'G7': '9', 'G8': '27', 'G9': '27', 'H1': '7', 'H2': '2', 'H3': '4', 'H4': '9',
                            'H5': '1', 'H6': '8', 'H7': '5', 'H8': '3', 'H9': '6', 'I1': '9', 'I2': '3', 'I3': '5',
                            'I4': '7', 'I5': '2', 'I6': '6', 'I7': '1', 'I8': '4', 'I9': '8'}
    possible_solutions_2 = [
        {'A1': '23', 'A2': '4', 'A3': '7', 'A4': '6', 'A5': '8', 'A6': '5', 'A7': '23', 'A8': '9', 'A9': '1', 'B1': '6',
         'B2': '9', 'B3': '8', 'B4': '4', 'B5': '37', 'B6': '1', 'B7': '237', 'B8': '5', 'B9': '237', 'C1': '23',
         'C2': '5', 'C3': '1', 'C4': '23', 'C5': '79', 'C6': '79', 'C7': '8', 'C8': '6', 'C9': '4', 'D1': '8',
         'D2': '17', 'D3': '9', 'D4': '1235', 'D5': '6', 'D6': '237', 'D7': '4', 'D8': '27', 'D9': '2357', 'E1': '5',
         'E2': '6', 'E3': '2', 'E4': '8', 'E5': '347', 'E6': '347', 'E7': '37', 'E8': '1', 'E9': '9', 'F1': '4',
         'F2': '17', 'F3': '3', 'F4': '125', 'F5': '579', 'F6': '279', 'F7': '6', 'F8': '8', 'F9': '257', 'G1': '1',
         'G2': '8', 'G3': '6', 'G4': '35', 'G5': '345', 'G6': '34', 'G7': '9', 'G8': '27', 'G9': '27', 'H1': '7',
         'H2': '2', 'H3': '4', 'H4': '9', 'H5': '1', 'H6': '8', 'H7': '5', 'H8': '3', 'H9': '6', 'I1': '9', 'I2': '3',
         'I3': '5', 'I4': '7', 'I5': '2', 'I6': '6', 'I7': '1', 'I8': '4', 'I9': '8'},
        {'A1': '23', 'A2': '4', 'A3': '7', 'A4': '6', 'A5': '8', 'A6': '5', 'A7': '23', 'A8': '9', 'A9': '1', 'B1': '6',
         'B2': '9', 'B3': '8', 'B4': '4', 'B5': '3', 'B6': '1', 'B7': '237', 'B8': '5', 'B9': '237', 'C1': '23',
         'C2': '5', 'C3': '1', 'C4': '23', 'C5': '79', 'C6': '79', 'C7': '8', 'C8': '6', 'C9': '4', 'D1': '8',
         'D2': '17', 'D3': '9', 'D4': '1235', 'D5': '6', 'D6': '237', 'D7': '4', 'D8': '27', 'D9': '2357', 'E1': '5',
         'E2': '6', 'E3': '2', 'E4': '8', 'E5': '347', 'E6': '347', 'E7': '37', 'E8': '1', 'E9': '9', 'F1': '4',
         'F2': '17', 'F3': '3', 'F4': '125', 'F5': '579', 'F6': '279', 'F7': '6', 'F8': '8', 'F9': '257', 'G1': '1',
         'G2': '8', 'G3': '6', 'G4': '35', 'G5': '345', 'G6': '34', 'G7': '9', 'G8': '27', 'G9': '27', 'H1': '7',
         'H2': '2', 'H3': '4', 'H4': '9', 'H5': '1', 'H6': '8', 'H7': '5', 'H8': '3', 'H9': '6', 'I1': '9', 'I2': '3',
         'I3': '5', 'I4': '7', 'I5': '2', 'I6': '6', 'I7': '1', 'I8': '4', 'I9': '8'}
    ]

    def test_naked_twins(self):
        self.assertTrue(solution.naked_twins(self.before_naked_twins_1) in self.possible_solutions_1,
                        "Your naked_twins function produced an unexpected board.")

    def test_naked_twins2(self):
        self.assertTrue(solution.naked_twins(self.before_naked_twins_2) in self.possible_solutions_2,
                        "Your naked_twins function produced an unexpected board.")



class TestDiagonalSudoku(unittest.TestCase):
    diagonal_grid = '2.............62....1....7...6..8...3...9...7...6..4...4....8....52.............3'
    solved_diag_sudoku = {'G7': '8', 'G6': '9', 'G5': '7', 'G4': '3', 'G3': '2', 'G2': '4', 'G1': '6', 'G9': '5',
                          'G8': '1', 'C9': '6', 'C8': '7', 'C3': '1', 'C2': '9', 'C1': '4', 'C7': '5', 'C6': '3',
                          'C5': '2', 'C4': '8', 'E5': '9', 'E4': '1', 'F1': '1', 'F2': '2', 'F3': '9', 'F4': '6',
                          'F5': '5', 'F6': '7', 'F7': '4', 'F8': '3', 'F9': '8', 'B4': '7', 'B5': '1', 'B6': '6',
                          'B7': '2', 'B1': '8', 'B2': '5', 'B3': '3', 'B8': '4', 'B9': '9', 'I9': '3', 'I8': '2',
                          'I1': '7', 'I3': '8', 'I2': '1', 'I5': '6', 'I4': '5', 'I7': '9', 'I6': '4', 'A1': '2',
                          'A3': '7', 'A2': '6', 'E9': '7', 'A4': '9', 'A7': '3', 'A6': '5', 'A9': '1', 'A8': '8',
                          'E7': '6', 'E6': '2', 'E1': '3', 'E3': '4', 'E2': '8', 'E8': '5', 'A5': '4', 'H8': '6',
                          'H9': '4', 'H2': '3', 'H3': '5', 'H1': '9', 'H6': '1', 'H7': '7', 'H4': '2', 'H5': '8',
                          'D8': '9', 'D9': '2', 'D6': '8', 'D7': '1', 'D4': '4', 'D5': '3', 'D2': '7', 'D3': '6',
                          'D1': '5'}

    def test_solve(self):
        self.assertEqual(solution.solve(self.diagonal_grid), self.solved_diag_sudoku)

if __name__ == '__main__':
    unittest.main()
